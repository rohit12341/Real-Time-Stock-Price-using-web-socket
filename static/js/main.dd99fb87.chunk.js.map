{"version":3,"sources":["stock-chart.js","App.js","serviceWorker.js","reducer/reducer.js","reducer/reducers.js","index.js"],"names":["Chart","props","data","options","StockChart","state","lineChartData","labels","datasets","type","label","backgroundColor","borderColor","pointBackgroundColor","pointBorderColor","borderWidth","lineTension","lineChartOptions","responsive","maintainAspectRatio","tooltips","enabled","scales","xAxes","ticks","autoSkip","maxTicksLimit","subscribe","channels","name","product_ids","this","ws","WebSocket","onopen","send","JSON","stringify","onmessage","e","value","parse","oldBtcDataSet","newBtcDataSet","push","price","newChartData","concat","Date","toLocaleTimeString","setState","close","console","log","style","maxHeight","minHeight","height","React","Component","App","className","connect","status","Boolean","window","location","hostname","match","combineReducers","composeEh","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducer","applyMiddleware","reduxThunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mOAIMA,EAAQ,SAAAC,GAAK,OAAI,kBAAC,IAAD,CAAMC,KAAMD,EAAMC,KAAMC,QAASF,EAAME,WA0G/CC,E,kDAtGX,WAAYH,GAAO,IAAD,8BACd,cAAMA,IACDI,MAAQ,CACVC,cAAe,CACdC,OAAQ,GACRC,SAAU,CACR,CACEC,KAAM,OACNC,MAAO,UACPC,gBAAiB,mBACjBC,YAAa,QACbC,qBAAsB,QACtBC,iBAAkB,OAClBC,YAAa,IACbC,YAAa,IACbd,KAAM,MAIZe,iBAAkB,CAChBC,YAAY,EACZC,qBAAqB,EACrBC,SAAU,CACRC,SAAS,GAEXC,OAAQ,CACNC,MAAO,CACL,CACEC,MAAO,CACLC,UAAU,EACVC,cAAe,SA9Bb,E,gEAuCE,IAAD,OACZC,EAAY,CACflB,KAAM,YACNmB,SAAU,CACR,CACEC,KAAM,SACNC,YAAa,CAAC,cAKpBC,KAAKC,GAAK,IAAIC,UAAU,0BAExBF,KAAKC,GAAGE,OAAS,WACf,EAAKF,GAAGG,KAAKC,KAAKC,UAAUV,KAG9BI,KAAKC,GAAGM,UAAY,SAAAC,GAClB,IAAMC,EAAQJ,KAAKK,MAAMF,EAAErC,MAC3B,GAAmB,WAAfsC,EAAM/B,KAAV,CAIF,IAAMiC,EAAgB,EAAKrC,MAAMC,cAAcE,SAAS,GAClDmC,EAAa,eAAQD,GAC3BC,EAAczC,KAAK0C,KAAKJ,EAAMK,OAE9B,IAAMC,EAAY,2BACb,EAAKzC,MAAMC,eADE,IAEhBE,SAAU,CAACmC,GACXpC,OAAQ,EAAKF,MAAMC,cAAcC,OAAOwC,QACtC,IAAIC,MAAOC,wBAGf,EAAKC,SAAS,CAAE5C,cAAewC,Q,6CAM7Bf,KAAKC,GAAGmB,U,+BAOZ,OADAC,QAAQC,IAAItB,KAAK1B,MAAMC,eAEnB,6BACH,uEACA,yBAAKgD,MAAO,CAACC,UAAU,QAASC,UAAU,QAASC,OAAO,SAE1D,kBAAC,EAAD,CACKvD,KAAM6B,KAAK1B,MAAMC,cACjBH,QAAS4B,KAAK1B,MAAMY,yB,GA9FLyC,IAAMC,WCIzBC,E,kDACJ,WAAY3D,GAAO,IAAD,8BAChB,cAAMA,IACDI,MAAQ,GAFG,E,qDAQlB,OACE,yBAAKwD,UAAU,OACb,kBAAC,EAAD,W,GAXYH,IAAMC,WA8DTG,eAPC,SAACzD,GAEf,OADA+C,QAAQC,IAAIhD,GACL,CACL0D,OAAQ1D,KAIqB,GAAlByD,CAAsBF,GC7DjBI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,mBCfSC,cAAgB,CAC3BnE,KCJgB,WAAqC,IAApCG,EAAmC,uDAA3B,CAACH,KAAO,MAAmB,iCACxD,OAAO,eAAIG,MCSLiE,EAAYL,OAAOM,sCAAwCC,IAE3DC,EAAQC,YAAYC,EAASL,EAAUM,YAAgBC,OAE7DC,IAASC,OACP,kBAAC,IAAD,CAAUN,MAAOA,GACjB,kBAAC,IAAMO,WAAP,KACE,kBAAC,EAAD,QAGFC,SAASC,eAAe,SH+GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtC,QAAQsC,MAAMA,EAAMC,a","file":"static/js/main.dd99fb87.chunk.js","sourcesContent":["import React from 'react';\nimport { Line } from \"react-chartjs-2\";\n\n\nconst Chart = props => <Line data={props.data} options={props.options} />;\n\n\nclass StockChart extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n           lineChartData: {\n            labels: [],\n            datasets: [\n              {\n                type: \"line\",\n                label: \"BTC-USD\",\n                backgroundColor: \"rgba(0, 0, 0, 0)\",\n                borderColor: \"green\",\n                pointBackgroundColor: \"white\",\n                pointBorderColor: \"blue\",\n                borderWidth: \"2\",\n                lineTension: 0.45,\n                data: []\n              }\n            ]\n          },\n          lineChartOptions: {\n            responsive: true,\n            maintainAspectRatio: false,\n            tooltips: {\n              enabled: true\n            },\n            scales: {\n              xAxes: [\n                {\n                  ticks: {\n                    autoSkip: true,\n                    maxTicksLimit: 10\n                  }\n                }\n              ]\n            }\n          }\n        };\n    }\n\n    componentDidMount(){\n     const subscribe = {\n        type: \"subscribe\",\n        channels: [\n          {\n            name: \"ticker\",\n            product_ids: [\"BTC-USD\"]\n          }\n        ]\n      };\n\n      this.ws = new WebSocket(\"wss://ws-feed.gdax.com\");\n\n      this.ws.onopen = () => {\n        this.ws.send(JSON.stringify(subscribe));\n      };\n\n      this.ws.onmessage = e => {\n        const value = JSON.parse(e.data);\n        if (value.type !== \"ticker\") {\n          return;\n        }\n\n      const oldBtcDataSet = this.state.lineChartData.datasets[0];\n      const newBtcDataSet = { ...oldBtcDataSet };\n      newBtcDataSet.data.push(value.price);\n\n      const newChartData = {\n        ...this.state.lineChartData,\n        datasets: [newBtcDataSet],\n        labels: this.state.lineChartData.labels.concat(\n          new Date().toLocaleTimeString()\n        )\n      };\n      this.setState({ lineChartData: newChartData });\n    }\n    }\n\n\n    componentWillUnmount() {\n        this.ws.close();\n      }\n\n\n\nrender(){\n    console.log(this.state.lineChartData);\n    return (\n        <div>    \n     <h2>Real Time Stock Price using web socket </h2>\n     <div style={{maxHeight:'600px', minHeight:'450px', height:'auto'}}>\n\n     <Chart\n          data={this.state.lineChartData}\n          options={this.state.lineChartOptions}\n        />\n        </div>\n        </div>\n        );\n     }\n  }\n\n\nexport default StockChart;","import React from 'react';\nimport './App.css';\nimport {connect} from 'react-redux';\n// import Test from \"./test\";\n// import Home from \"./home\";\n// import { Router, Switch, Route } from 'react-router-dom';\n// import Chat from './chat';\nimport StockChart from './stock-chart';\n\n\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n       \n    }\n   }\n\nrender(){\n  return (\n    <div className=\"App\">\n      <StockChart />  \n    {/* <Test/>  */}\n    {/* <Router>\n      <Switch>\n        <Route exect path=\"/chat\" component={Chat} />\n      </Switch>\n    </Router> */}\n    {/* <Chat /> */}\n\n    {/* <MyErrorBoundary>\n    <Home/> \n    </MyErrorBoundary> */}\n    </div>\n  );\n}\n}\n\n\n\n\n// class MyErrorBoundary extends React.Component {\n//   state = {\n//     errorMessage: ''\n//   }\n//   static getDerivedStateFromError(error) {\n//     return {errorMessage: error.toString()}\n//   }\n//   componentDidCatch(error, info) {\n//     this.logErrorToServices(error.toString(), info.componentStack)\n//   }\n//   // A fake logging service ðŸ˜¬\n//   logErrorToServices = console.log\n//   render() {\n//     if (this.state.errorMessage) {\n//       return (\n//         <p>\n//           {this.state.errorMessage}\n//         </p>\n//       )\n//     }\n//     return this.props.children\n//   }\n// }\n\nconst getState =(state) => {\n  console.log(state);\n  return {\n    status: state\n  }\n}\n\nexport default connect(getState, {})(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers } from 'redux';\nimport {Data} from './reducers';\n\nexport default combineReducers({\n    data:Data,\n});","export const Data = (state = {data : null} , action) => {\nreturn {...state};\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { Provider } from 'react-redux';\nimport reduxThunk from 'redux-thunk';\nimport reducer from './reducer/reducer';\n\nconst composeEh = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(reducer, composeEh(applyMiddleware(reduxThunk)));\n\nReactDOM.render(\n  <Provider store={store}>\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}